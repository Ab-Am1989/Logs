input {
  file {
    path => "/tmp/sample.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  # First try to parse standard Java-style logs
  grok {
    match => { "message" => [
      '%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[%{DATA:thread}\] %{JAVACLASS:class} - %{GREEDYDATA:log_message}'
      ]
    }
  }

  if "ERROR" in [log_level] {
      grok {
        match => { "log_message" => [
          '%{DATA:error_message}! %{GREEDYDATA:json_payload}'
          ]
        }
      }
    }
  

  # Extract key-value pairs from log messages
  kv {
    source => "log_message"
    field_split => " "
    value_split => "="
    include_keys => ["pool_size", "active", "max_wait", "response_time", "service"]
  }

  # Parse the embedded JSON if present
  if [json_payload] {
    json {
      source => "json_payload"
      target => "transaction"
    }
    mutate {
      remove_field => ["json_payload","log_message"]
    }
  }


  # Common date parsing
  date {
    match => ["timestamp", "ISO8601", "dd/MMM/yyyy:HH:mm:ss Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
    target => "@timestamp"
  }
}

output {
  stdout {
    codec => rubydebug
  }
  # Add your actual output here (Elasticsearch, etc.)
  elasticsearch {
    hosts => ["http://192.168.122.97:9200"]
    index => "javalogs-%{+YYYY.MM.dd}"
    user => "${ES_USER}"
    password => "${ES_PASS}"
  }
}